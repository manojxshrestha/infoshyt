#!/bin/bash

# infoshyt Configuration Helper
# Sets up infoshyt.cfg and API key files
# Usage: ./configure_infoshyt.sh

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
RESET='\033[0m'

# Banner
echo -e "
 ▄▀▀█▀▄    ▄▀▀▄ ▀▄  ▄▀▀▀█▄    ▄▀▀▀▀▄   ▄▀▀▀▀▄  ▄▀▀▄ ▄▄   ▄▀▀▄ ▀▀▄  ▄▀▀▀█▀▀▄ 
█   █  █  █  █ █ █ █  ▄▀  ▀▄ █      █ █ █   ▐ █  █   ▄▀ █   ▀▄ ▄▀ █    █  ▐ 
▐   █  ▐  ▐  █  ▀█ ▐ █▄▄▄▄   █      █    ▀▄   ▐  █▄▄▄█  ▐     █   ▐   █     
    █       █   █   █    ▐   ▀▄    ▄▀ ▀▄   █     █   █        █      █      
 ▄▀▀▀▀▀▄  ▄▀   █    █          ▀▀▀▀    █▀▀▀     ▄▀  ▄▀      ▄▀     ▄▀       
█       █ █    ▐   █                   ▐       █   █        █     █         
▐       ▐ ▐        ▐                           ▐   ▐        ▐     ▐         
                                    
infoshyt Config Helper
"

# Variables
CONFIG_FILE="infoshyt.cfg"
GITHUB_TOKENS_FILE="$HOME/Tools/.github_tokens"
GITLAB_TOKENS_FILE="$HOME/Tools/.gitlab_tokens"
TOOLS_DIR="$HOME/Tools"

# Ensure Tools directory exists
mkdir -p "$TOOLS_DIR"

# Validate GitHub token format (starts with ghp_ and is 40 chars total)
validate_github_token() {
    local token="$1"
    # Trim whitespace and check for ghp_ followed by 36 alphanumeric chars (case insensitive)
    token=$(echo "$token" | tr -d '[:space:]')
    if [[ "$token" =~ ^ghp_[A-Za-z0-9]{36}$ ]]; then
        return 0
    else
        echo -e "${RED}[ERROR] Invalid token format: $token${RESET}"
        echo -e "${YELLOW}GitHub tokens must start with 'ghp_' and be 40 characters long (e.g., ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx).${RESET}"
        return 1
    fi
}

# Validate GitLab token format (starts with glpat- and is 20-40 chars after prefix)
validate_gitlab_token() {
    local token="$1"
    # Trim whitespace and check for glpat- followed by 20-40 alphanumeric or underscore chars
    token=$(echo "$token" | tr -d '[:space:]')
    if [[ "$token" =~ ^glpat-[A-Za-z0-9_-]{20,40}$ ]]; then
        return 0
    else
        echo -e "${RED}[ERROR] Invalid token format: $token${RESET}"
        echo -e "${YELLOW}GitLab tokens must start with 'glpat-' and be 20-40 characters long after the prefix (e.g., glpat-xxxxxxxxxxxxxxxxxxxxxxxx).${RESET}"
        return 1
    fi
}

# Prompt for GitHub token
echo -e "${GREEN}[INFO] Enter a GitHub token${RESET}"
echo -e "${YELLOW}Get token at https://github.com/settings/tokens (scopes: repo, read:org, read:user)${RESET}"
read -rp "GitHub Token: " GITHUB_TOKEN
if ! validate_github_token "$GITHUB_TOKEN"; then
    echo -e "${RED}[ERROR] Configuration aborted due to invalid GitHub token.${RESET}"
    exit 1
fi

# Prompt for GitLab token
echo -e "${GREEN}[INFO] Enter a GitLab token${RESET}"
echo -e "${YELLOW}Get token at https://gitlab.com/-/profile/personal_access_tokens${RESET}"
read -rp "GitLab Token: " GITLAB_TOKEN
if ! validate_gitlab_token "$GITLAB_TOKEN"; then
    echo -e "${RED}[ERROR] Configuration aborted due to invalid GitLab token.${RESET}"
    exit 1
fi

# Create token files
echo -e "${GREEN}[INFO] Creating $GITHUB_TOKENS_FILE${RESET}"
{
    echo "# GitHub Tokens for infoshyt"
    echo "$GITHUB_TOKEN"
} > "$GITHUB_TOKENS_FILE"
chmod 600 "$GITHUB_TOKENS_FILE"

echo -e "${GREEN}[INFO] Creating $GITLAB_TOKENS_FILE${RESET}"
{
    echo "# GitLab Tokens for infoshyt"
    echo "$GITLAB_TOKEN"
} > "$GITLAB_TOKENS_FILE"
chmod 600 "$GITLAB_TOKENS_FILE"

# Create infoshyt.cfg
echo -e "${GREEN}[INFO] Creating $CONFIG_FILE${RESET}"
cat <<EOF > "$CONFIG_FILE"
# infoshyt Configuration File
#
# Generated by configure_infoshyt.sh on $(date '+%Y-%m-%d %H:%M:%S %z')
# Instructions:
# - Do not share this file publicly (contains API keys).
# - Edit manually only if needed.
# - Rerun configure_infoshyt.sh to update API keys.

# Tool directory
TOOLS_DIR=$TOOLS_DIR

# GitHub tokens file
GITHUB_TOKENS=$GITHUB_TOKENS_FILE

# GitLab tokens file
GITLAB_TOKENS=$GITLAB_TOKENS_FILE

# Task toggles (true/false)
GOOGLE_DORKS=true
GITHUB_DORKS=true
GITHUB_REPOS=true
METADATA=true
API_LEAKS=true
EMAILS=true
DOMAIN_INFO=true
THIRD_PARTIES=true
SPOOF=true
IP_INFO=true
EOF
chmod 600 "$CONFIG_FILE"

echo -e "${GREEN}[SUCCESS] Configuration completed!${RESET}"
